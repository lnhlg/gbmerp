// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DutyClient is the client API for Duty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DutyClient interface {
	GetDuty(ctx context.Context, in *GetDutyRequest, opts ...grpc.CallOption) (*GetDutyReply, error)
}

type dutyClient struct {
	cc grpc.ClientConnInterface
}

func NewDutyClient(cc grpc.ClientConnInterface) DutyClient {
	return &dutyClient{cc}
}

func (c *dutyClient) GetDuty(ctx context.Context, in *GetDutyRequest, opts ...grpc.CallOption) (*GetDutyReply, error) {
	out := new(GetDutyReply)
	err := c.cc.Invoke(ctx, "/api.duty.v1.Duty/GetDuty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DutyServer is the server API for Duty service.
// All implementations must embed UnimplementedDutyServer
// for forward compatibility
type DutyServer interface {
	GetDuty(context.Context, *GetDutyRequest) (*GetDutyReply, error)
	mustEmbedUnimplementedDutyServer()
}

// UnimplementedDutyServer must be embedded to have forward compatible implementations.
type UnimplementedDutyServer struct {
}

func (UnimplementedDutyServer) GetDuty(context.Context, *GetDutyRequest) (*GetDutyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDuty not implemented")
}
func (UnimplementedDutyServer) mustEmbedUnimplementedDutyServer() {}

// UnsafeDutyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DutyServer will
// result in compilation errors.
type UnsafeDutyServer interface {
	mustEmbedUnimplementedDutyServer()
}

func RegisterDutyServer(s grpc.ServiceRegistrar, srv DutyServer) {
	s.RegisterService(&Duty_ServiceDesc, srv)
}

func _Duty_GetDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDutyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DutyServer).GetDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.duty.v1.Duty/GetDuty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DutyServer).GetDuty(ctx, req.(*GetDutyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Duty_ServiceDesc is the grpc.ServiceDesc for Duty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Duty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.duty.v1.Duty",
	HandlerType: (*DutyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDuty",
			Handler:    _Duty_GetDuty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/duty/v1/duty.proto",
}
